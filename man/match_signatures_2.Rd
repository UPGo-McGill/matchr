% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_signatures_2.R
\name{match_signatures_2}
\alias{match_signatures_2}
\title{Match images based on colour signatures}
\usage{
match_signatures_2(
  x,
  y = NULL,
  compare_ar = TRUE,
  stretch = 1.2,
  mem_scale = 0.2,
  mem_override = FALSE,
  quiet = FALSE
)
}
\arguments{
\item{x, y}{Vectors of class \code{matchr_signature_2} to be matched. If \code{y} is
missing (default), each object in \code{x} will be matched against each other
object in \code{x.} If \code{y} is present, each object in \code{x} will be matched against
each object in \code{y}.}

\item{compare_ar}{A logical scalar. Should signatures only be compared for
images with similar aspect ratios (default)? If TRUE, k-means clustering is
used to identify breakpoints between aspect ratios that maximize
between-group distance and minimize the total number of calculations that the
function needs to execute. (Values of k between 3 and 8 are evaluated.) Image
signatures from \code{x} are split into lists between these break points. This
argument is forced to FALSE if either \code{x} or \code{y} has fewer than 10 non-NA
elements.}

\item{stretch}{A numeric scalar. When \code{compare_ar} is TRUE, in order to catch
matches that would fall across a break point, image signatures from \code{y} are
split into lists between the break point / \code{stretch} (default 1.2) on the
lower bound and the break point * \code{stretch} on the upper bound. Increasing
this value will possibly catch matches between extremely distorted images,
but at the cost of potentially larger numbers of false positives, and
substantially increased processing time.}

\item{mem_scale}{A numeric scalar between 0 and 1. What portion of total
system memory should be made available for a single correlation matrix
calculation (default 0.2)? Increasing this value might speed up function
execution, but at the cost of significantly increased system instability.}

\item{mem_override}{A logical scalar. Should the function attempt to run even
if it detects insufficient system memory (default FALSE)? If so, the usual
error for insufficient memory will be downgraded to a warning.}

\item{quiet}{A logical scalar. Should the function execute quietly, or should
it return status updates throughout the function (default)?}
}
\value{
A vector of class \code{matchr_matrix}, each element of which is the
Hamming distance for the \code{x} and \code{y} signatures falling in a given aspect
ratio range. If \code{x} and \code{y} are both present, each matrix will have
\code{length(x)} rows and \code{length(y)} columns, and for the matrix \code{Q} the cell
\code{Q[i, j]} will be the Hamming distance between images \code{x[[i]]} and \code{y[[j]]}.
If \code{y} is not present, each matrix will be square, and the cell \code{Q[i, j]}
will be the Hamming distance between images \code{x[[i]]} and \code{x[[j]]}.
}
\description{
\code{match_signatures_2} takes one or two vectors of image signatures and
produces a Hamming distance matrix to identify matches.
}
\details{
A function for identifying matching images. The function takes one or two
vectors of images signatures (class \code{matchr_signature}) and compares their
signatures to find matches.

The comparison is done by creating colour signatures for each input image
using \code{\link{create_signature}} and then computing the Hamming distance
between these signatures. In general, pairs of images
which were identical prior to arbitrary resampling and compression will have
correlation coefficients of at least 0.99.

The function can optionally filter images by aspect ratio, so only images
with very similar aspect ratios will be compared. This can remove potential
false positives and possibly speed up function execution, if images are
relatively evenly split between aspect ratios.
}
\examples{
\dontrun{
# Setup
sigs <- create_signature(test_urls)

# Find matches within a single matchr_signature vector
match_signatures(sigs)

# Find matches between two matchr_signature vectors
match_signatures(sigs[1:8], sigs[9:15])

# To look for matches between images with very different aspect ratios, set `compare_ar = FALSE`
match_signatures(sigs, compare_ar = FALSE)
}
}
