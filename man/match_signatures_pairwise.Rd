% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_signatures_pairwise.R
\name{match_signatures_pairwise}
\alias{match_signatures_pairwise}
\title{Match pairs of images based on colour signatures}
\usage{
match_signatures_pairwise(x, y, distance = ~nearest * bilinear)
}
\arguments{
\item{x, y}{Vectors of class \code{matchr_signature} to be matched.}

\item{distance}{A one-sided formula (or character string which can be
coerced to a formula) with one or both of the terms \code{nearest} and \code{bilinear},
expressing how the Hamming distance between image signature vectors should be
calculated. The default (\code{~nearest * bilinear}) takes the Hamming distances
of each of the two image signature components and multiplies them together.
Any arithmetical combination of these distances is a valid argument to
\code{distance}, e.g. \code{~ nearest + log(bilinear)}.}
}
\value{
A numeric vector, each element \code{v[i]} of which is the Hamming
distance between the \code{x[i]} and \code{y[i]} signatures. The formula supplied to
the \code{distance} argument will be present as an additional attribute to the
return vector, named \code{formula}.
}
\description{
\code{match_signatures_pairwise} takes two vectors of image signatures and
produces a vector of Hamming distances between the pairwise elements of the
signatures.
}
\details{
While \code{\link{match_signatures}} produces a matrix of Hamming distances
between each of the \code{x} elements and each of the \code{y} elements, sometimes it
is helpful to simply calculate Hamming distances between pairs of elements
in each vectorâ€”e.g. \code{x[i]} and \code{y[i]}, \code{x[j]} and \code{y[j]}, etc.
\code{match_signatures_pairwise} calculates these pairwise distances and
returns a numeric vector.
}
\examples{
\dontrun{
# Setup
sigs <- create_signature(example_urls)

# Find pairwise matches between vectors
match_signatures_pairwise(sigs, sigs)
}
}
