% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_images.R
\name{match_images}
\alias{match_images}
\title{TKTK}
\usage{
match_images(x, y = NULL, compare = TRUE, quiet = FALSE)
}
\arguments{
\item{x, y}{Character vector of file paths or URLs. If \code{y} is supplied then
matches will be identified between the two input vectors \code{x} and \code{y}; if it
is not supplied then matches will be identified within the input vector \code{x}.}

\item{compare}{A logical scalar. Should the interactive
\code{\link{compare_images}} Shiny app be run to manually verify match
results (default)?}

\item{quiet}{A logical scalar. Should the function execute quietly, or should
it return status updates throughout the function (default)?}
}
\value{
A tibble if {dplyr} is installed or a data frame if not, with one
row per identified match, and the following columns:
\itemize{
\item \code{x_path} and \code{y_path}: The file paths for the images which were matched.
\item \code{correlation}: The Pearson correlation coefficient of the two files'
image signatures.
\item \code{match}: A character vector indicating match status.
(See \code{\link{confirm_matches}} for details.)
}
}
\description{
\code{match_images} is a convenience wrapper around the core workflow of
matchr. It reads in one or two character vectors of image paths and then
runs \code{\link{load_image}}, \code{\link{create_signature}},
\code{\link{match_signatures}}, \code{\link{identify_matches}}, and
\code{\link{confirm_matches}} on these inputs (in each case with the
respective function's default arguments), and then optionally sends the
results to the \code{\link{compare_images}} interactive Shiny app for manual
verification and integrates any manual changes into the output data frame.
}
\details{
For large datasets where performance and memory considerations make it
prudent to save intermediate outputs, or if any non-default options are
required, it is recommended to run the component functions separately, but
for small datasets \code{match_images} offers the simplest path from images
to image matches.
}
\examples{
\dontrun{
# Use match_images with a single argument to identify matches within a set of images
match_images(test_urls)

# Or add a second argument to identify matches between two sets of images
match_images(test_urls[1:8], test_urls[9:15])

# To retrieve results without manual verification through the Shiny app, set `compare = FALSE`
match_images(test_urls, compare = FALSE)
}
}
